import os
import speech_recognition as sr
from faster_whisper import WhisperModel

# ‚úÖ Load Whisper model 1 l·∫ßn khi app kh·ªüi ƒë·ªông
# N·∫øu c√≥ GPU: d√πng "cuda" ƒë·ªÉ tƒÉng t·ªëc
DEVICE = "cuda" if os.environ.get("USE_GPU", "0") == "1" else "cpu"
MODEL_SIZE = os.environ.get("WHISPER_MODEL", "small")

print(f"üöÄ Kh·ªüi t·∫°o Whisper model [{MODEL_SIZE}] tr√™n {DEVICE}...")
whisper_model = WhisperModel(MODEL_SIZE, device=DEVICE, compute_type="float16" if DEVICE=="cuda" else "int8")

def _transcribe_with_whisper(audio_path: str) -> str:
    print(f"üîé Whisper x·ª≠ l√Ω file: {audio_path}")
    try:
        segments, info = whisper_model.transcribe(audio_path, language="vi", vad_filter=True)
        text = " ".join([seg.text for seg in segments]).strip()
        print("üìÉ Whisper:", text[:200])
        return text
    except Exception as e:
        print("‚ùå Whisper l·ªói:", e)
        return ""

def _transcribe_with_google(audio_path: str) -> str:
    print(f"üîé Google SR x·ª≠ l√Ω file: {audio_path}")
    r = sr.Recognizer()
    with sr.AudioFile(audio_path) as source:
        audio = r.record(source)
    try:
        text = r.recognize_google(audio, language="vi-VN")
        print("üìÉ Google SR:", text[:200])
        return text
    except Exception as e:
        print("‚ùå Google SR l·ªói:", e)
        return ""

def audio_to_text(audio_path: str) -> str:
    if not os.path.exists(audio_path):
        return "‚ùå Kh√¥ng t√¨m th·∫•y file audio"

    text = _transcribe_with_whisper(audio_path)
    if text:
        return text

    print("‚ÑπÔ∏è Whisper th·∫•t b·∫°i ‚Üí th·ª≠ Google SR...")
    text = _transcribe_with_google(audio_path)
    if text:
        return text

    return "‚ùå Kh√¥ng th·ªÉ nh·∫≠n d·∫°ng gi·ªçng n√≥i"
